#!/usr/bin/env python3
"""melee-gci-compiler.py: Compiles custom data into Melee GCI save files using
   MGC script files"""

import sys, getopt
import hashlib
from pathlib import Path
import mgc.compiler as compiler
import mgc.logger as logger
from mgc.errors import CompileError

USAGE_TEXT = """\
Usage: melee-gci-compiler.py [options] [script_path]

script_path    The path to the MGC script file you want to compile.
-i             Optionally input a Melee GCI to use its existing data as a base.
-o             The GCI file to output. If omitted, no data will be written.
-h, --help     Displays this usage text.
--nopack       Do not pack the GCI, so you can inspect the outputted data.
--silent       Suppress command line output, except for fatal errors.
--debug        Output extra information while compiling and on errors.

You can omit script_path to pack or unpack a GCI without changing its content.
"""


def main(argv):
    script_path = None
    input_gci = None
    output_gci = None
    nopack = False
    silent = False
    debug = False
    logger.silent_log = silent
    try:
        opts, args = getopt.getopt(argv[1:],'i:o:h',['help','nopack','silent','debug'])
    except getopt.GetoptError:
        print(USAGE_TEXT)
        sys.exit(2)
    if len(args) > 1:
        print(USAGE_TEXT)
        sys.exit(2)
    elif len(args) == 0 and len(opts) == 0:
        print(USAGE_TEXT)
        sys.exit(0)
    elif len(args) == 0:
        logger.warning("No MGC script specified; no custom data will be compiled")
    else:
        script_path = args[0]
    for opt, arg in opts:
        if opt in ('-h', '--help'):
            print(USAGE_TEXT)
            sys.exit(0)
        elif opt == '-i': input_gci = arg
        elif opt == '-o': output_gci = arg
        elif opt == '--nopack': nopack = True
        elif opt == '--silent': silent = True
        elif opt == '--debug': debug = True
        else:
            print(USAGE_TEXT)
            sys.exit(2)
    try:
        gci_data = compiler.init(script_path, input_gci_path=input_gci, nopack=nopack, silent=silent, debug=debug)
    except CompileError as e:
        if debug: raise
        else:
            logger.error(e.message)
            _cleanup(script_path)
            sys.exit(10)
    logger.info("Compile successful")
    if not output_gci: logger.info("No output GCI specified; no files will be written")
    elif nopack: logger.info("Writing unpacked GCI file; not loadable by Melee")
    else: logger.info("Writing final GCI file")
    if output_gci:
        try:
            with open(output_gci, 'wb') as f:
                f.write(gci_data)
        except Exception as e:
            if debug: raise
            else: logger.error(f"Couldn't write GCI file: {e}")
    md5 = hashlib.md5(gci_data).hexdigest()
    logger.info(f"MD5: {md5}")
    logger.info("Successfully finished all tasks")
    _cleanup(script_path)
    sys.exit()


def _cleanup(script_path):
    """Deletes temp files generated by the ASM compiler."""
    if not script_path: return
    tmp_path = Path(script_path).parent/"tmp"
    (tmp_path/"code.txt").unlink(missing_ok=True)
    (tmp_path/"code.bin").unlink(missing_ok=True)
    (tmp_path/"src1.o").unlink(missing_ok=True)
    (tmp_path/"src2.o").unlink(missing_ok=True)
    # Remove tmp directory only if empty
    try: tmp_path.rmdir()
    except: pass
    return


if __name__ == "__main__":
    main(sys.argv)
